#!/bin/bash

# Test script for PR #28 implementation
# This script demonstrates how to test the limit enforcement and Stripe metered billing features

echo "========================================="
echo "PR #28 Implementation Test Guide"
echo "========================================="
echo ""

echo "Prerequisites:"
echo "1. Database is running and migrations are applied"
echo "2. STRIPE_SECRET_KEY is configured in .env"
echo "3. At least one tier exists with limits configured"
echo ""

echo "========================================="
echo "Test 1: Limit Enforcement (Hard Limit)"
echo "========================================="
echo ""
echo "Setup:"
echo "- Create a tier with usageLimit: 1000, limitAction: 'block'"
echo "- Create a subscription using this tier"
echo ""
echo "Test scenario:"
echo "1. Track 800 units (should succeed with warning)"
echo "   curl -X POST http://localhost:3000/api/saas/usage \\"
echo "     -H 'X-API-Key: YOUR_API_KEY' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{
echo "       \"subscriptionId\": \"YOUR_SUBSCRIPTION_ID\","
echo "       \"userId\": \"YOUR_USER_ID\","
echo "       \"quantity\": 800
echo "     }'"
echo ""
echo "   Expected: Success (201), limits.percentage: \"80.0\", limits.action: \"warn\""
echo ""
echo "2. Track another 300 units (should be blocked)"
echo "   curl -X POST http://localhost:3000/api/saas/usage \\"
echo "     -H 'X-API-Key: YOUR_API_KEY' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{
echo "       \"subscriptionId\": \"YOUR_SUBSCRIPTION_ID\","
echo "       \"userId\": \"YOUR_USER_ID\","
echo "       \"quantity\": 300
echo "     }'"
echo ""
echo "   Expected: Error (429), message: \"Usage limit exceeded\""
echo ""

echo "========================================="
echo "Test 2: Soft Limits (Warning Only)"
echo "========================================="
echo ""
echo "Setup:"
echo "- Create a tier with usageLimit: 1000, limitAction: 'warn'"
echo "- Create a subscription using this tier"
echo ""
echo "Test scenario:"
echo "1. Track 900 units (should succeed with warning)"
echo "   curl -X POST http://localhost:3000/api/saas/usage \\"
echo "     -H 'X-API-Key: YOUR_API_KEY' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{
echo "       \"subscriptionId\": \"YOUR_SUBSCRIPTION_ID\","
echo "       \"userId\": \"YOUR_USER_ID\","
echo "       \"quantity\": 900
echo "     }'"
echo ""
echo "   Expected: Success (201), limits.percentage: \"90.0\", limits.action: \"warn\""
echo "   Expected: Email notification created in EmailNotification table"
echo ""
echo "2. Track another 200 units (should still succeed)"
echo "   curl -X POST http://localhost:3000/api/saas/usage \\"
echo "     -H 'X-API-Key: YOUR_API_KEY' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{
echo "       \"subscriptionId\": \"YOUR_SUBSCRIPTION_ID\","
echo "       \"userId\": \"YOUR_USER_ID\","
echo "       \"quantity\": 200
echo "     }'"
echo ""
echo "   Expected: Success (201), limits.percentage: \"110.0\", limits.action: \"warn\""
echo "   Expected: Another email notification for exceeding limit"
echo ""

echo "========================================="
echo "Test 3: Stripe Metered Billing"
echo "========================================="
echo ""
echo "Setup:"
echo "1. Create a metered price in Stripe:"
echo "   stripe prices create \\"
echo "     --product YOUR_PRODUCT_ID \\"
echo "     --currency usd \\"
echo "     --recurring[interval]=month \\"
echo "     --recurring[usage_type]=metered \\"
echo "     --recurring[aggregate_usage]=sum \\"
echo "     --billing_scheme=per_unit \\"
echo "     --unit_amount=100"
echo ""
echo "2. Update tier with meteringEnabled: true, stripePriceIdMetered: 'price_...'"
echo "3. Create a StripeSubscriptionItem record linking subscription to Stripe"
echo ""
echo "Test scenario:"
echo "1. Track usage (should report to Stripe)"
echo "   curl -X POST http://localhost:3000/api/saas/usage \\"
echo "     -H 'X-API-Key: YOUR_API_KEY' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{
echo "       \"subscriptionId\": \"YOUR_SUBSCRIPTION_ID\","
echo "       \"userId\": \"YOUR_USER_ID\","
echo "       \"quantity\": 100
echo "     }'"
echo ""
echo "   Expected: Success (201), stripeReported: true"
echo "   Expected: Usage visible in Stripe dashboard under subscription item"
echo ""
echo "2. Verify in Stripe:"
echo "   stripe subscription_items usage_record_summaries \\"
echo "     --subscription-item SUBSCRIPTION_ITEM_ID"
echo ""
echo "   Expected: Usage records showing accumulated usage"
echo ""

echo "========================================="
echo "Test 4: Database Verification"
echo "========================================="
echo ""
echo "After running tests, verify in database:"
echo ""
echo "1. Check UsageLimitEvent table:"
echo "   SELECT * FROM \"UsageLimitEvent\" ORDER BY timestamp DESC LIMIT 10;"
echo ""
echo "   Expected: Event records for warnings and exceeded events"
echo ""
echo "2. Check EmailNotification table:"
echo "   SELECT * FROM \"EmailNotification\" WHERE type LIKE 'usage_%' ORDER BY \"createdAt\" DESC LIMIT 10;"
echo ""
echo "   Expected: Notification records for limit warnings"
echo ""
echo "3. Check StripeSubscriptionItem table:"
echo "   SELECT * FROM \"StripeSubscriptionItem\";"
echo ""
echo "   Expected: Records showing lastReportedUsage and lastReportedAt"
echo ""

echo "========================================="
echo "Test 5: Configuration Examples"
echo "========================================="
echo ""
echo "Example tier configurations in database:"
echo ""
echo "-- Hard limit (block at 10k)"
echo "UPDATE \"Tier\" SET"
echo "  \"usageLimit\" = 10000,"
echo "  \"limitAction\" = 'block',"
echo "  \"softLimitPercent\" = 0.8,"
echo "  \"warningThresholds\" = '[80, 90, 95]'::jsonb"
echo "WHERE id = 'YOUR_TIER_ID';"
echo ""
echo "-- Soft limit (warn only)"
echo "UPDATE \"Tier\" SET"
echo "  \"usageLimit\" = 10000,"
echo "  \"limitAction\" = 'warn',"
echo "  \"softLimitPercent\" = 0.8,"
echo "  \"warningThresholds\" = '[80, 90]'::jsonb"
echo "WHERE id = 'YOUR_TIER_ID';"
echo ""
echo "-- Overage allowed"
echo "UPDATE \"Tier\" SET"
echo "  \"usageLimit\" = 10000,"
echo "  \"limitAction\" = 'overage',"
echo "  \"overageAllowed\" = true,"
echo "  \"overageRate\" = 10,"
echo "  \"warningThresholds\" = '[90, 100]'::jsonb"
echo "WHERE id = 'YOUR_TIER_ID';"
echo ""
echo "-- Stripe metered billing"
echo "UPDATE \"Tier\" SET"
echo "  \"meteringEnabled\" = true,"
echo "  \"stripePriceIdMetered\" = 'price_YOUR_PRICE_ID',"
echo "  \"unitPrice\" = 1"
echo "WHERE id = 'YOUR_TIER_ID';"
echo ""

echo "========================================="
echo "Additional Resources"
echo "========================================="
echo ""
echo "For more details, see:"
echo "- PR28_IMPLEMENTATION.md - Complete implementation guide"
echo "- LIMIT_ENFORCEMENT_IMPLEMENTATION_GUIDE.md - Detailed limit enforcement guide"
echo "- STRIPE_METERED_BILLING_GUIDE.md - Stripe integration guide"
echo ""
echo "========================================="
