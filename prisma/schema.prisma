// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?        @unique
  passwordResetTokenExp DateTime?
  role                  String         @default("creator") // creator, platform_owner
  subscriptionStatus    SubscriptionStatus @default(FREE)
  accounts              Account[]
  sessions              Session[]
  saasCreator           SaasCreator?
  subscriptions         Subscription[]
  usageRecords          UsageRecord[]
  apiKeys               ApiKey[]
  emailNotifications    EmailNotification[]
}

enum SubscriptionStatus {
  FREE
  PAID
  TRIAL
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SaaS Creator model - represents a SaaS business using the platform
model SaasCreator {
  id                  String              @id @default(cuid())
  userId              String              @unique
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName        String
  businessDescription String?             @db.Text
  website             String?
  onboardingCompleted Boolean             @default(false)
  onboardingStep      Int                 @default(1)
  // Brand data from crawler
  logoUrl             String?
  faviconUrl          String?
  primaryColor        String?
  secondaryColor      String?
  fonts               String?             @db.Text // JSON array of fonts
  companyAddress      String?
  contactInfo         String?             @db.Text // JSON object with contact details
  productsParsed      String?             @db.Text // JSON array of products
  voiceAndTone        String?             @db.Text
  crawlJobId          String?
  crawlStatus         String?             @default("pending") // pending, processing, completed, failed
  crawlConfidence     String?             @db.Text // JSON object with confidence scores
  crawlCompletedAt    DateTime?
  lightweightScrape   Json?
  deepDesignTokens    Json?
  mergedScrapeData    Json?
  scrapedSite         ScrapedSite?        @relation("SaasCreatorToScrapedSite")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  stripeAccount       StripeAccount?
  products            Product[]
  subscribers         Subscription[]
  whiteLabelConfig    WhiteLabelConfig?
  analyticsSnapshots  AnalyticsSnapshot[]
  apiKeys             ApiKey[]
}

// Stripe OAuth connection for SaaS creators
model StripeAccount {
  id              String      @id @default(cuid())
  saasCreatorId   String      @unique
  saasCreator     SaasCreator @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  stripeAccountId String
  accessToken     String?     @db.Text
  refreshToken    String?     @db.Text
  tokenType       String?
  scope           String?
  livemode        Boolean     @default(false)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([stripeAccountId])
}

// Products offered by SaaS creators
model Product {
  id               String      @id @default(cuid())
  saasCreatorId    String
  saasCreator      SaasCreator @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  name             String
  description      String?     @db.Text
  isActive         Boolean     @default(true)
  stripePriceId    String?
  stripeProductId  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  tiers            Tier[]
  subscriptions    Subscription[]
  meteringConfig   MeteringConfig?
}

// Pricing tiers for products
model Tier {
  id            String         @id @default(cuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  name          String
  description   String?        @db.Text
  priceAmount   Int            // Amount in cents
  billingPeriod String         // monthly, yearly, etc.
  features      String[]       // Array of feature descriptions
  usageLimit    Int?           // Optional usage limit
  stripePriceId String?        @unique
  isActive      Boolean        @default(true)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

// Subscriptions - linking subscribers to products and tiers
model Subscription {
  id                   String       @id @default(cuid())
  userId               String
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  saasCreatorId        String
  saasCreator          SaasCreator  @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  productId            String
  product              Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  tierId               String
  tier                 Tier         @relation(fields: [tierId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String?      @unique
  status               String       @default("active") // active, canceled, past_due, etc.
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  usageRecords         UsageRecord[]
}

// Metering configuration for products
model MeteringConfig {
  id               String   @id @default(cuid())
  productId        String   @unique
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  meteringType     String   // requests, users, storage, compute, etc.
  meteringUnit     String   // count, GB, hours, etc.
  aggregationType  String   // sum, max, last_during_period
  usageReportingUrl String? // Webhook URL for usage reporting
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Usage tracking records
model UsageRecord {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity       Float
  timestamp      DateTime     @default(now())
  metadata       Json?        // Additional context about the usage
  reportedAt     DateTime     @default(now())

  @@index([subscriptionId, timestamp])
  @@index([userId, timestamp])
}

// White-label site configuration for subscribers
model WhiteLabelConfig {
  id              String      @id @default(cuid())
  saasCreatorId   String      @unique
  saasCreator     SaasCreator @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  brandName       String?
  primaryColor    String?
  secondaryColor  String?
  logoUrl         String?
  faviconUrl      String?
  customDomain    String?     @unique
  subdomain       String?     @unique
  customCss       String?     @db.Text
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// API Keys for authentication
model ApiKey {
  id            String      @id @default(cuid())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  saasCreatorId String?
  saasCreator   SaasCreator? @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  name          String
  key           String      @unique
  keyPrefix     String?     // First 8 chars for display
  permissions   String[]    // Array of permissions
  lastUsedAt    DateTime?
  expiresAt     DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([saasCreatorId])
  @@index([key])
}

// Email notification tracking
model EmailNotification {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // subscription_created, payment_failed, etc.
  subject       String
  body          String   @db.Text
  recipient     String
  status        String   @default("pending") // pending, sent, failed
  sentAt        DateTime?
  error         String?  @db.Text
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Webhook events from Stripe
model WebhookEvent {
  id              String   @id @default(cuid())
  eventId         String   @unique // Stripe event ID
  eventType       String
  status          String   @default("pending") // pending, processed, failed
  payload         Json
  processedAt     DateTime?
  error           String?  @db.Text
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([eventType])
  @@index([status])
  @@index([createdAt])
}

// Analytics snapshots for performance
model AnalyticsSnapshot {
  id              String   @id @default(cuid())
  saasCreatorId   String?
  saasCreator     SaasCreator? @relation(fields: [saasCreatorId], references: [id], onDelete: Cascade)
  period          String   // daily, weekly, monthly
  periodStart     DateTime
  periodEnd       DateTime
  totalRevenue    Int      @default(0)
  newSubscribers  Int      @default(0)
  churnedSubscribers Int   @default(0)
  activeSubscribers Int    @default(0)
  totalUsage      Float    @default(0)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([saasCreatorId, period, periodStart])
  @@index([saasCreatorId])
  @@index([periodStart])
}

model ScrapedSite {
  id            String       @id @default(cuid())
  saasCreatorId String       @unique
  saasCreator   SaasCreator  @relation("SaasCreatorToScrapedSite", fields: [saasCreatorId], references: [id], onDelete: Cascade)
  url           String       @unique
  domain        String?
  title         String?
  description   String?
  crawledAt     DateTime     @default(now())
  rawHtml       String?
  screenshot    Bytes?
  companyInfo   CompanyInfo? @relation("ScrapedSiteToCompanyInfo")
  designTokens  DesignToken[] @relation("ScrapedSiteToDesignToken")
  scrapedProducts ScrapedProduct[] @relation("ScrapedSiteToScrapedProduct")
  brandVoice    BrandVoice?  @relation("ScrapedSiteToBrandVoice")

  @@index([url])
  @@index([domain])
}

model CompanyInfo {
  id             String      @id @default(cuid())
  scrapedSiteId  String      @unique
  scrapedSite    ScrapedSite @relation("ScrapedSiteToCompanyInfo", fields: [scrapedSiteId], references: [id], onDelete: Cascade)
  companyName    String?
  legalName      String?
  contactEmails  String[]
  contactPhones  String[]
  addresses      String[]
  structuredJson Json?
  createdAt      DateTime    @default(now())

  @@index([scrapedSiteId])
}

model DesignToken {
  id        String      @id @default(cuid())
  scrapedSiteId String
  scrapedSite ScrapedSite @relation("ScrapedSiteToDesignToken", fields: [scrapedSiteId], references: [id], onDelete: Cascade)
  tokenKey  String
  tokenType String
  tokenValue String
  source    String?
  meta      Json?
  createdAt DateTime    @default(now())

  @@index([scrapedSiteId])
  @@index([tokenType])
}

model ScrapedProduct {
  id          String      @id @default(cuid())
  scrapedSiteId String
  scrapedSite ScrapedSite @relation("ScrapedSiteToScrapedProduct", fields: [scrapedSiteId], references: [id], onDelete: Cascade)
  name        String
  slug        String?
  price       String?
  description String?
  productUrl  String?
  metadata    Json?
  createdAt   DateTime    @default(now())

  @@index([scrapedSiteId])
}

model BrandVoice {
  id           String      @id @default(cuid())
  scrapedSiteId String     @unique
  scrapedSite  ScrapedSite @relation("ScrapedSiteToBrandVoice", fields: [scrapedSiteId], references: [id], onDelete: Cascade)
  summary      String?
  guidelines   Json?
  embedding    Unsupported("vector(1536)")?
  createdAt    DateTime    @default(now())

  @@index([scrapedSiteId])
}

